<!DOCTYPE html>
<html lang="hu">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üè≠ Industrial SCADA/DCS System</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        :root {
            --primary-blue: #1e3a8a;
            --secondary-blue: #3b82f6;
            --success-green: #16a34a;
            --warning-yellow: #fbbf24;
            --danger-red: #dc2626;
            --gray-dark: #374151;
            --gray-light: #f3f4f6;
            --scada-bg: #0f172a;
            --panel-bg: #1e293b;
            --border-color: #334155;
            --text-primary: #f1f5f9;
            --text-secondary: #94a3b8;
            --alarm-red: #ff0000;
            --alarm-yellow: #ffff00;
            --status-green: #00ff00;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: var(--scada-bg);
            color: var(--text-primary);
            overflow-x: auto;
            min-height: 100vh;
        }

        .scada-header {
            background: linear-gradient(135deg, var(--primary-blue), var(--secondary-blue));
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 2px solid var(--border-color);
            position: sticky;
            top: 0;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }

        .scada-title {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .company-logo {
            width: 40px;
            height: 40px;
            background: var(--success-green);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: white;
        }

        .system-info h1 {
            font-size: 24px;
            color: white;
            margin: 0;
        }

        .system-info p {
            font-size: 12px;
            color: rgba(255,255,255,0.8);
            margin: 0;
        }

        .header-controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .alarm-indicator {
            padding: 8px 12px;
            border-radius: 6px;
            font-weight: bold;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: var(--success-green);
            color: white;
        }

        .alarm-indicator.warning {
            background: var(--warning-yellow);
            color: black;
            animation: blink 1s infinite;
        }

        .alarm-indicator.critical {
            background: var(--danger-red);
            color: white;
            animation: blink 0.5s infinite;
        }

        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0.3; }
        }

        .system-time {
            font-family: 'Courier New', monospace;
            font-weight: bold;
            color: var(--status-green);
        }

        .dcs-toolbar {
            background: var(--panel-bg);
            padding: 8px 15px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .toolbar-group {
            display: flex;
            gap: 5px;
            align-items: center;
        }

        .toolbar-button {
            padding: 6px 10px;
            background: transparent;
            color: var(--text-secondary);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            cursor: pointer;
            font-size: 11px;
            transition: all 0.3s ease;
        }

        .toolbar-button:hover {
            background: var(--secondary-blue);
            color: white;
            transform: translateY(-1px);
        }

        .toolbar-button.active {
            background: var(--secondary-blue);
            color: white;
        }

        .main-container {
            display: grid;
            grid-template-columns: 300px 1fr 350px;
            grid-template-rows: auto 1fr;
            height: calc(100vh - 120px);
            gap: 2px;
            background: var(--border-color);
        }

        .sidebar {
            background: var(--panel-bg);
            padding: 15px;
            overflow-y: auto;
            border-right: 1px solid var(--border-color);
        }

        .sidebar h3 {
            color: var(--text-primary);
            margin-bottom: 15px;
            font-size: 14px;
            text-transform: uppercase;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 5px;
        }

        .collapsible-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            padding: 8px 12px;
            background: rgba(59, 130, 246, 0.1);
            border: 1px solid var(--secondary-blue);
            border-radius: 6px;
            margin-bottom: 10px;
            transition: all 0.3s ease;
        }

        .collapsible-header:hover {
            background: rgba(59, 130, 246, 0.2);
            transform: translateY(-1px);
        }

        .collapsible-header h3 {
            margin: 0;
            border: none;
            padding: 0;
            font-size: 12px;
        }

        .collapsible-header h4 {
            margin: 0;
            border: none;
            padding: 0;
            font-size: 12px;
            color: var(--secondary-blue);
        }

        .collapse-icon {
            font-size: 14px;
            transition: transform 0.3s ease;
            color: var(--secondary-blue);
        }

        .collapse-icon.expanded {
            transform: rotate(180deg);
        }

        .collapsible-content {
            max-height: 1000px;
            opacity: 1;
            overflow: hidden;
            transition: all 0.4s ease;
        }

        .collapsible-content.collapsed {
            max-height: 0;
            opacity: 0;
            margin-bottom: 0;
        }

        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            padding: 8px 15px;
            background: rgba(59, 130, 246, 0.1);
            border-bottom: 1px solid var(--secondary-blue);
            transition: all 0.3s ease;
        }

        .panel-header:hover {
            background: rgba(59, 130, 246, 0.2);
        }

        .panel-header h3 {
            margin: 0;
            font-size: 14px;
        }

        .panel-content {
            padding: 15px;
            transition: all 0.4s ease;
            overflow: hidden;
        }

        .panel-content.collapsed {
            max-height: 0;
            padding-top: 0;
            padding-bottom: 0;
            opacity: 0;
        }

        /* PID Parameters Modal */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: none;
            z-index: 2000;
            animation: fadeIn 0.3s ease;
        }

        .modal-overlay.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .pid-modal {
            background: var(--panel-bg);
            border: 2px solid var(--secondary-blue);
            border-radius: 12px;
            width: 600px;
            max-width: 90vw;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            animation: slideIn 0.3s ease;
        }

        .modal-header {
            background: linear-gradient(135deg, var(--secondary-blue), var(--primary-blue));
            color: white;
            padding: 15px 20px;
            border-radius: 10px 10px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h3 {
            margin: 0;
            font-size: 16px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .modal-close {
            background: none;
            border: none;
            color: white;
            font-size: 20px;
            cursor: pointer;
            padding: 5px;
            border-radius: 4px;
            transition: background 0.3s ease;
        }

        .modal-close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .modal-body {
            padding: 20px;
        }

        .pid-section {
            margin-bottom: 25px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            padding: 15px;
            border-left: 4px solid var(--success-green);
        }

        .pid-section h4 {
            color: var(--secondary-blue);
            margin: 0 0 15px 0;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .pid-params-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin-bottom: 15px;
        }

        .pid-param {
            text-align: center;
            background: rgba(59, 130, 246, 0.1);
            border: 1px solid var(--secondary-blue);
            border-radius: 6px;
            padding: 10px;
        }

        .pid-param-label {
            font-size: 11px;
            color: var(--text-secondary);
            margin-bottom: 5px;
            font-weight: bold;
        }

        .pid-param-value {
            font-size: 14px;
            color: var(--text-primary);
            font-family: 'Courier New', monospace;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .pid-param-desc {
            font-size: 8px;
            color: var(--text-secondary);
            line-height: 1.2;
        }

        .pid-status {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin-top: 15px;
        }

        .pid-status-item {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid var(--success-green);
            border-radius: 4px;
            padding: 8px;
            text-align: center;
        }

        .pid-status-label {
            font-size: 9px;
            color: var(--success-green);
            margin-bottom: 3px;
        }

        .pid-status-value {
            font-size: 11px;
            color: var(--text-primary);
            font-family: 'Courier New', monospace;
            font-weight: bold;
        }

        .modal-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid var(--border-color);
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideIn {
            from { transform: translateY(-50px) scale(0.9); opacity: 0; }
            to { transform: translateY(0) scale(1); opacity: 1; }
        }

        .process-overview {
            grid-column: 2;
            grid-row: 1 / 3;
            background: var(--scada-bg);
            position: relative;
            overflow: hidden;
        }

        .right-panel {
            background: var(--panel-bg);
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .alarms-panel, .trends-panel {
            background: var(--panel-bg);
            transition: all 0.3s ease;
        }

        .alarms-panel {
            padding: 15px;
            height: 40%;
            overflow-y: auto;
        }

        .trends-panel {
            padding: 15px;
            height: 60%;
            overflow-y: auto;
        }

        .tag-group {
            margin-bottom: 20px;
            background: rgba(255,255,255,0.05);
            border-radius: 8px;
            padding: 12px;
            border: 1px solid var(--border-color);
        }

        .tag-group h4 {
            color: var(--secondary-blue);
            margin-bottom: 10px;
            font-size: 12px;
            text-transform: uppercase;
        }

        .tag-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .tag-item:last-child {
            border-bottom: none;
        }

        .tag-name {
            font-size: 11px;
            color: var(--text-secondary);
            font-weight: 500;
        }

        .tag-value {
            font-size: 12px;
            font-weight: bold;
            font-family: 'Courier New', monospace;
            color: var(--status-green);
        }

        .piping-diagram {
            position: relative;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at 30% 20%, rgba(59, 130, 246, 0.1), transparent 50%),
                        radial-gradient(circle at 70% 80%, rgba(16, 185, 129, 0.1), transparent 50%),
                        var(--scada-bg);
        }

        .equipment {
            position: absolute;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
        }

        .equipment:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(0,0,0,0.4);
        }

        .reactor {
            width: 120px;
            height: 120px;
            background: linear-gradient(135deg, #6366f1, #4338ca);
            border-color: var(--secondary-blue);
            left: 180px;
            top: 140px;
            border-radius: 50%;
        }

        .heat-exchanger {
            width: 100px;
            height: 80px;
            background: linear-gradient(135deg, #10b981, #059669);
            border-color: var(--success-green);
            left: 400px;
            top: 95px;
        }

        .pump {
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #f59e0b, #d97706);
            border-color: var(--warning-yellow);
            left: 95px;
            top: 310px;
            border-radius: 50%;
        }

        .valve {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            border-color: #8b5cf6;
            left: 480px;
            top: 115px;
            transform: rotate(45deg);
        }

        .valve span {
            transform: rotate(-45deg);
        }

        .tank {
            width: 90px;
            height: 100px;
            background: linear-gradient(180deg, #374151, #1f2937);
            border-color: var(--gray-dark);
            left: 530px;
            top: 190px;
            border-radius: 8px 8px 20px 20px;
        }

        .pipe {
            position: absolute;
            background: linear-gradient(90deg, var(--border-color), #64748b);
            border-radius: 3px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .pipe-horizontal {
            height: 8px;
        }

        .pipe-vertical {
            width: 8px;
        }

        /* Main process flow pipes */
        .pipe1 {
            left: 140px;
            top: 335px;
            width: 70px;
        }

        .pipe2 {
            left: 205px;
            top: 270px;
            height: 70px;
        }

        .pipe3 {
            left: 320px;
            top: 185px;
            width: 90px;
        }

        .pipe4 {
            left: 500px;
            top: 135px;
            width: 60px;
        }

        .pipe5 {
            left: 555px;
            top: 135px;
            height: 70px;
        }

        .pipe6 {
            left: 520px;
            top: 300px;
            width: 50px;
        }

        .pipe7 {
            left: 105px;
            top: 370px;
            width: 420px;
        }

        .pipe8 {
            left: 125px;
            top: 360px;
            height: 20px;
        }

        /* Flow direction arrows */
        .flow-arrow {
            position: absolute;
            color: #00ff88;
            font-size: 16px;
            font-weight: bold;
            text-shadow: 0 0 4px rgba(0, 255, 136, 0.6);
            animation: flow-pulse 2s infinite;
        }

        @keyframes flow-pulse {
            0%, 100% { opacity: 0.6; }
            50% { opacity: 1; }
        }

        .arrow1 { left: 170px; top: 325px; }
        .arrow2 { left: 195px; top: 290px; transform: rotate(90deg); }
        .arrow3 { left: 350px; top: 175px; }
        .arrow4 { left: 520px; top: 125px; }
        .arrow5 { left: 545px; top: 160px; transform: rotate(90deg); }
        .arrow6 { left: 540px; top: 290px; transform: rotate(180deg); }
        .arrow7 { left: 300px; top: 360px; transform: rotate(180deg); }

        .sensor {
            position: absolute;
            width: 25px;
            height: 25px;
            background: var(--status-green);
            border: 2px solid white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: bold;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .sensor:hover {
            transform: scale(1.2);
            box-shadow: 0 0 15px var(--status-green);
        }

        .sensor-label {
            position: absolute;
            top: -25px;
            left: -20px;
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 9px;
            white-space: nowrap;
            pointer-events: none;
        }

        .process-variable {
            position: absolute;
            background: rgba(0,0,0,0.8);
            color: var(--status-green);
            padding: 5px 8px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 11px;
            font-weight: bold;
            border: 1px solid var(--success-green);
        }

        .alarm-entry {
            display: flex;
            align-items: center;
            padding: 8px;
            margin-bottom: 5px;
            border-radius: 4px;
            font-size: 11px;
            border-left: 4px solid;
        }

        .alarm-entry.critical {
            background: rgba(220, 38, 38, 0.2);
            border-color: var(--danger-red);
        }

        .alarm-entry.warning {
            background: rgba(251, 191, 36, 0.2);
            border-color: var(--warning-yellow);
        }

        .alarm-entry.info {
            background: rgba(59, 130, 246, 0.2);
            border-color: var(--secondary-blue);
        }

        .alarm-time {
            color: var(--text-secondary);
            font-family: 'Courier New', monospace;
            margin-right: 10px;
            min-width: 60px;
        }

        .alarm-message {
            flex: 1;
            color: var(--text-primary);
        }

        .trend-chart {
            width: 100%;
            height: 200px;
            background: rgba(255,255,255,0.05);
            border-radius: 6px;
            margin-bottom: 15px;
            position: relative;
        }

        .control-panel {
            background: rgba(255,255,255,0.05);
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 15px;
        }

        .control-row {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            gap: 10px;
        }

        .control-label {
            font-size: 11px;
            color: var(--text-secondary);
            min-width: 80px;
        }

        .control-input {
            flex: 1;
            background: var(--scada-bg);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 11px;
        }

        .control-input:focus {
            outline: none;
            border-color: var(--secondary-blue);
        }

        .control-button {
            padding: 6px 12px;
            background: var(--secondary-blue);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 10px;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .control-button:hover {
            background: var(--primary-blue);
            transform: translateY(-1px);
        }

        .control-button.danger {
            background: var(--danger-red);
        }

        .control-button.success {
            background: var(--success-green);
        }

        .neural-log {
            background: var(--scada-bg);
            border-radius: 6px;
            padding: 10px;
            height: 100px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 10px;
            color: var(--status-green);
            border: 1px solid var(--border-color);
        }

        .ai-control-panel {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(16, 185, 129, 0.2));
            border: 1px solid var(--secondary-blue);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .ai-status {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
        }

        .ai-brain {
            width: 30px;
            height: 30px;
            background: var(--success-green);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 14px;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @media (max-width: 1400px) {
            .main-container {
                grid-template-columns: 280px 1fr 320px;
            }
        }

        @media (max-width: 1200px) {
            .main-container {
                grid-template-columns: 250px 1fr 300px;
            }
        }

        @media (max-width: 1024px) {
            .main-container {
                grid-template-columns: 1fr;
                grid-template-rows: auto auto auto;
                height: auto;
            }
            
            .sidebar {
                height: auto;
                order: 1;
            }
            
            .process-overview {
                grid-column: 1;
                grid-row: 1;
                height: 500px;
                order: 2;
            }
            
            .right-panel {
                height: auto;
                order: 3;
            }
            
            .alarms-panel, .trends-panel {
                height: 300px;
            }
        }

        /* Mobile sidebar visibility fix */
        @media (max-width: 768px) {
            .main-container {
                grid-template-columns: 1fr;
                grid-template-rows: auto auto auto;
            }
            
            .sidebar {
                display: block !important;
                width: 100% !important;
                height: auto !important;
                padding: 10px;
            }
            
            .control-panel {
                margin-bottom: 10px;
            }
            
            .tag-group {
                margin-bottom: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="scada-header">
        <div class="scada-title">
            <div class="company-logo">üè≠</div>
            <div class="system-info">
                <h1>Industrial SCADA/DCS System</h1>
                <p>Heat Exchange Process Control Unit #1 - AI-Enhanced PID Controller v2.1</p>
            </div>
        </div>
        <div class="header-controls">
            <div class="alarm-indicator" id="alarm-status" onclick="acknowledgeAlarms()">
                <span id="alarm-count">0</span> ALARMS
            </div>
            <div class="system-time" id="system-time">--:--:--</div>
        </div>
    </div>

    <!-- PID Parameters Modal -->
    <div class="modal-overlay" id="pid-modal-overlay" onclick="closePIDModal()">
        <div class="pid-modal" onclick="event.stopPropagation()">
            <div class="modal-header">
                <h3>‚öôÔ∏è PID Szab√°lyoz√≥ Param√©terek</h3>
                <button class="modal-close" onclick="closePIDModal()">‚úï</button>
            </div>
            <div class="modal-body">
                <!-- Global PID Parameters -->
                <div class="pid-section">
                    <h4>üéõÔ∏è Glob√°lis PID Param√©terek</h4>
                    <div class="pid-params-grid">
                        <div class="pid-param">
                            <div class="pid-param-label">Kp</div>
                            <div class="pid-param-value" id="modal-pid-kp">1.200</div>
                            <div class="pid-param-desc">Proporcion√°lis<br>er≈ës√≠t√©s</div>
                        </div>
                        <div class="pid-param">
                            <div class="pid-param-label">Ki</div>
                            <div class="pid-param-value" id="modal-pid-ki">0.1500</div>
                            <div class="pid-param-desc">Integr√°l<br>er≈ës√≠t√©s</div>
                        </div>
                        <div class="pid-param">
                            <div class="pid-param-label">Kd</div>
                            <div class="pid-param-value" id="modal-pid-kd">0.250</div>
                            <div class="pid-param-desc">Deriv√°lt<br>er≈ës√≠t√©s</div>
                        </div>
                        <div class="pid-param">
                            <div class="pid-param-label">Teljes√≠tm√©ny</div>
                            <div class="pid-param-value" id="modal-pid-performance">95.0%</div>
                            <div class="pid-param-desc">Szab√°lyoz√≥<br>hat√©konys√°g</div>
                        </div>
                    </div>
                </div>

                <!-- Temperature Control -->
                <div class="pid-section">
                    <h4>üå°Ô∏è H≈ëm√©rs√©klet Szab√°lyoz√°s</h4>
                    <div class="pid-status">
                        <div class="pid-status-item">
                            <div class="pid-status-label">Aktu√°lis Hiba</div>
                            <div class="pid-status-value" id="modal-temp-error">0.0¬∞C</div>
                        </div>
                        <div class="pid-status-item">
                            <div class="pid-status-label">Integr√°l</div>
                            <div class="pid-status-value" id="modal-temp-integral">0.0</div>
                        </div>
                        <div class="pid-status-item">
                            <div class="pid-status-label">Deriv√°lt</div>
                            <div class="pid-status-value" id="modal-temp-derivative">0.0</div>
                        </div>
                    </div>
                </div>

                <!-- Pressure Control -->
                <div class="pid-section">
                    <h4>‚ö° Nyom√°s Szab√°lyoz√°s</h4>
                    <div class="pid-status">
                        <div class="pid-status-item">
                            <div class="pid-status-label">Aktu√°lis Hiba</div>
                            <div class="pid-status-value" id="modal-pressure-error">0.0 bar</div>
                        </div>
                        <div class="pid-status-item">
                            <div class="pid-status-label">Integr√°l</div>
                            <div class="pid-status-value" id="modal-pressure-integral">0.0</div>
                        </div>
                        <div class="pid-status-item">
                            <div class="pid-status-label">Deriv√°lt</div>
                            <div class="pid-status-value" id="modal-pressure-derivative">0.0</div>
                        </div>
                    </div>
                </div>

                <!-- Flow Control -->
                <div class="pid-section">
                    <h4>üíß √Åraml√°s Szab√°lyoz√°s</h4>
                    <div class="pid-status">
                        <div class="pid-status-item">
                            <div class="pid-status-label">Aktu√°lis Hiba</div>
                            <div class="pid-status-value" id="modal-flow-error">0.0 L/min</div>
                        </div>
                        <div class="pid-status-item">
                            <div class="pid-status-label">Integr√°l</div>
                            <div class="pid-status-value" id="modal-flow-integral">0.0</div>
                        </div>
                        <div class="pid-status-item">
                            <div class="pid-status-label">Deriv√°lt</div>
                            <div class="pid-status-value" id="modal-flow-derivative">0.0</div>
                        </div>
                    </div>
                </div>

                <div class="modal-actions">
                    <button class="control-button" onclick="goToControlView()">üéØ Vez√©rl√©shez</button>
                    <button class="control-button" onclick="tunePID()">üéØ Auto Tune</button>
                    <button class="control-button" onclick="resetAI()">üîÑ Reset PID</button>
                    <button class="control-button" onclick="closePIDModal()">‚úÖ Bez√°r√°s</button>
                </div>
            </div>
        </div>
    </div>

    <div class="dcs-toolbar">
        <div class="toolbar-group">
            <button class="toolbar-button active" onclick="switchView('overview')">üìä √Åttekint√©s</button>
            <button class="toolbar-button" onclick="switchView('trends')">üìà Trendek</button>
            <button class="toolbar-button" onclick="switchView('alarms')">üö® Riaszt√°sok</button>
            <button class="toolbar-button" onclick="switchView('control')">‚öôÔ∏è Vez√©rl√©s</button>
        </div>
        <div class="toolbar-group">
            <button class="toolbar-button" onclick="exportReport(); console.log('Export button clicked');">üìã Jelent√©s</button>
            <button class="toolbar-button" onclick="toggleMaintenance()">üîß Karbantart√°s</button>
        </div>
        <div class="toolbar-group">
            <span style="color: var(--text-secondary); font-size: 11px;">Oper√°tor:</span>
            <span style="color: var(--text-primary); font-size: 11px; font-weight: bold;">Admin</span>
        </div>
    </div>

    <div class="main-container">
        <div class="sidebar">
            <div class="collapsible-header" onclick="toggleCollapse('process-tags')">
                <h3>üè∑Ô∏è Folyamat C√≠mk√©k</h3>
                <span class="collapse-icon expanded" id="process-tags-icon">‚ñº</span>
            </div>
            
            <div class="collapsible-content" id="process-tags-content">
                <div class="tag-group">
                    <div class="collapsible-header" onclick="toggleCollapse('temp-sensors')">
                        <h4>H≈ëm√©rs√©klet Szenzorok</h4>
                        <span class="collapse-icon expanded" id="temp-sensors-icon">‚ñº</span>
                    </div>
                    <div class="collapsible-content" id="temp-sensors-content">
                        <div class="tag-item">
                            <span class="tag-name">TI-101 Reaktor H≈ëm√©rs√©klet</span>
                            <span class="tag-value" id="tag-ti101">65.2¬∞C</span>
                        </div>
                        <div class="tag-item">
                            <span class="tag-name">TI-102 H≈ëcser√©l≈ë Kimenet</span>
                            <span class="tag-value" id="tag-ti102">42.8¬∞C</span>
                        </div>
                        <div class="tag-item">
                            <span class="tag-name">TI-103 Tank H≈ëm√©rs√©klet</span>
                            <span class="tag-value" id="tag-ti103">38.5¬∞C</span>
                        </div>
                    </div>
                </div>

                <div class="tag-group">
                    <div class="collapsible-header" onclick="toggleCollapse('pressure-sensors')">
                        <h4>Nyom√°s Szenzorok</h4>
                        <span class="collapse-icon expanded" id="pressure-sensors-icon">‚ñº</span>
                    </div>
                    <div class="collapsible-content" id="pressure-sensors-content">
                        <div class="tag-item">
                            <span class="tag-name">PI-201 Reaktor Nyom√°s</span>
                            <span class="tag-value" id="tag-pi201">5.2 bar</span>
                        </div>
                        <div class="tag-item">
                            <span class="tag-name">PI-202 Vezet√©k Nyom√°s</span>
                            <span class="tag-value" id="tag-pi202">4.8 bar</span>
                        </div>
                    </div>
                </div>

                <div class="tag-group">
                    <div class="collapsible-header" onclick="toggleCollapse('flow-sensors')">
                        <h4>√Åraml√°s M√©r√©s</h4>
                        <span class="collapse-icon expanded" id="flow-sensors-icon">‚ñº</span>
                    </div>
                    <div class="collapsible-content" id="flow-sensors-content">
                        <div class="tag-item">
                            <span class="tag-name">FI-301 F≈ë √Åraml√°s</span>
                            <span class="tag-value" id="tag-fi301">3.2 L/min</span>
                        </div>
                        <div class="tag-item">
                            <span class="tag-name">FI-302 Mell√©k √Åraml√°s</span>
                            <span class="tag-value" id="tag-fi302">1.8 L/min</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="collapsible-header" onclick="toggleCollapse('setpoints')">
                <h3>üéØ C√©l√©rt√©kek</h3>
                <span class="collapse-icon expanded" id="setpoints-icon">‚ñº</span>
            </div>
            
            <div class="collapsible-content" id="setpoints-content">
                <div class="control-panel">
                    <div class="control-row">
                        <span class="control-label">TIC-101:</span>
                        <input type="number" class="control-input" id="temp-setpoint" value="65.0" step="0.1" min="20" max="100" onchange="updateSetpoint('temp')" oninput="previewSetpoint('temp')">
                        <span style="font-size: 10px; color: var(--text-secondary);">¬∞C</span>
                    </div>
                    <div class="control-row">
                        <span class="control-label">PIC-201:</span>
                        <input type="number" class="control-input" id="pressure-setpoint" value="5.0" step="0.1" min="0" max="15" onchange="updateSetpoint('pressure')" oninput="previewSetpoint('pressure')">
                        <span style="font-size: 10px; color: var(--text-secondary);">bar</span>
                    </div>
                    <div class="control-row">
                        <span class="control-label">FIC-301:</span>
                        <input type="number" class="control-input" id="flow-setpoint" value="3.0" step="0.1" min="0" max="10" onchange="updateSetpoint('flow')" oninput="previewSetpoint('flow')">
                        <span style="font-size: 10px; color: var(--text-secondary);">L/min</span>
                    </div>
                    
                    <!-- Setpoint Status Display -->
                    <div style="margin-top: 15px; padding: 8px; background: rgba(59, 130, 246, 0.1); border-radius: 4px; border: 1px solid var(--secondary-blue);">
                        <div style="font-size: 10px; color: var(--secondary-blue); margin-bottom: 5px;">üìä Setpoint √Ållapot:</div>
                        <div style="font-size: 9px; color: var(--text-secondary);">
                            <div>H≈ëm√©rs√©klet: <span id="temp-status" style="color: var(--status-green);">OK</span></div>
                            <div>Nyom√°s: <span id="pressure-status" style="color: var(--status-green);">OK</span></div>
                            <div>√Åraml√°s: <span id="flow-status" style="color: var(--status-green);">OK</span></div>
                        </div>
                    </div>

                    <!-- Quick Setpoint Buttons -->
                    <div style="margin-top: 10px;">
                        <div style="font-size: 10px; color: var(--text-secondary); margin-bottom: 5px;">Gyors Be√°ll√≠t√°sok:</div>
                        <div style="display: flex; gap: 5px; flex-wrap: wrap;">
                            <button class="control-button" style="font-size: 8px; padding: 4px 6px;" onclick="setQuickSetpoints('normal')">Norm√°l</button>
                            <button class="control-button" style="font-size: 8px; padding: 4px 6px;" onclick="setQuickSetpoints('high')">Magas</button>
                            <button class="control-button" style="font-size: 8px; padding: 4px 6px;" onclick="setQuickSetpoints('low')">Alacsony</button>
                            <button class="control-button danger" style="font-size: 8px; padding: 4px 6px;" onclick="setQuickSetpoints('emergency')">V√©szhelyzet</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="collapsible-header" onclick="toggleCollapse('ai-control')">
                <h3>üß† AI Vez√©rl√©s</h3>
                <span class="collapse-icon expanded" id="ai-control-icon">‚ñº</span>
            </div>
            
            <div class="collapsible-content" id="ai-control-content">
                <div class="ai-control-panel">
                    <div class="ai-status">
                        <div class="ai-brain">üß†</div>
                        <div>
                            <div style="font-size: 12px; font-weight: bold; color: var(--success-green);">AI-PID AKT√çV</div>
                            <div style="font-size: 10px; color: var(--text-secondary);">Neur√°lis H√°l√≥ v2.1</div>
                        </div>
                    </div>
                    
                    <div class="control-row">
                        <span class="control-label">AI M√≥d:</span>
                        <select class="control-input" id="ai-mode" onchange="changeAIMode()">
                            <option value="neural">Neur√°lis H√°l√≥</option>
                            <option value="predictive">Predikt√≠v MPC</option>
                            <option value="adaptive">Adapt√≠v PID</option>
                            <option value="fuzzy">Fuzzy Logic</option>
                        </select>
                    </div>
                    <div class="control-row">
                        <span class="control-label">Tanul√°s:</span>
                        <button class="control-button success" id="ai-learn-btn" onclick="toggleAILearning()">AKT√çV</button>
                        <button class="control-button" onclick="resetAI()">RESET</button>
                        <button class="control-button" onclick="tunePID()" style="font-size: 9px;">üéØ TUNE</button>
                    </div>
                    <div class="control-row">
                        <button class="control-button" onclick="openPIDModal()" style="width: 100%; background: var(--secondary-blue); margin-top: 10px;">
                            ‚öôÔ∏è PID Param√©terek R√©szletesen
                        </button>
                    </div>
                    <div class="neural-log" id="neural-log">
                        <div style="color: #00ff00;">[AI-SYSTEM] Rendszer inicializ√°lva</div>
                        <div style="color: #ffff00;">[NEURAL-NET] Tanul√°s akt√≠v</div>
                        <div style="color: #00ffff;">[PID-TUNER] Param√©terek optimaliz√°lva</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="process-overview">
            <div class="piping-diagram">
                <!-- Pipes -->
                <div class="pipe pipe-horizontal pipe1"></div>
                <div class="pipe pipe-horizontal pipe2"></div>
                <div class="pipe pipe-horizontal pipe3"></div>
                <div class="pipe pipe-vertical pipe4"></div>

                <!-- Equipment -->
                <div class="equipment reactor" onclick="showEquipmentInfo('reactor')" title="R-001 Reaktor">
                    <span style="font-size: 12px;">R-001</span>
                    <span style="font-size: 10px;">REAKTOR</span>
                </div>

                <div class="equipment heat-exchanger" onclick="showEquipmentInfo('hx')" title="HX-001 H≈ëcser√©l≈ë">
                    <span style="font-size: 10px;">HX-001</span>
                    <span style="font-size: 8px;">H≈êCSER√âL≈ê</span>
                </div>

                <div class="equipment pump" onclick="showEquipmentInfo('pump')" title="P-001 F≈ë Pumpa">
                    <span style="font-size: 10px;">P-001</span>
                </div>

                <div class="equipment valve" onclick="showEquipmentInfo('valve')" title="V-001 Vez√©rl≈ë Szelep">
                    <span style="font-size: 8px;">V-001</span>
                </div>

                <div class="equipment tank" onclick="showEquipmentInfo('tank')" title="T-001 T√°rol√≥ Tank">
                    <span style="font-size: 10px;">T-001</span>
                    <span style="font-size: 8px;">TANK</span>
                </div>

                <!-- Sensors -->
                <div class="sensor" style="left: 240px; top: 120px;" onclick="showSensorInfo('TI-101')">
                    <span class="sensor-label">TI-101</span>
                    T
                </div>

                <div class="sensor" style="left: 450px; top: 70px;" onclick="showSensorInfo('TI-102')">
                    <span class="sensor-label">TI-102</span>
                    T
                </div>

                <div class="sensor" style="left: 200px; top: 280px;" onclick="showSensorInfo('PI-201')">
                    <span class="sensor-label">PI-201</span>
                    P
                </div>

                <div class="sensor" style="left: 280px; top: 350px;" onclick="showSensorInfo('FI-301')">
                    <span class="sensor-label">FI-301</span>
                    F
                </div>

                <div class="sensor" style="left: 590px; top: 170px;" onclick="showSensorInfo('PI-202')">
                    <span class="sensor-label">PI-202</span>
                    P
                </div>

                <!-- Process Variables Display -->
                <div class="process-variable pv-temp1" id="pv-temp1">65.2¬∞C</div>
                <div class="process-variable pv-temp2" id="pv-temp2">42.8¬∞C</div>
                <div class="process-variable pv-flow1" id="pv-flow1">3.2 L/min</div>
                <div class="process-variable pv-pressure1" id="pv-pressure1">5.2 bar</div>
            </div>
        </div>

        <div class="right-panel">
            <div class="alarms-panel">
                <div class="panel-header" onclick="toggleCollapse('alarms-panel')">
                    <h3>üö® Akt√≠v Riaszt√°sok</h3>
                    <span class="collapse-icon expanded" id="alarms-panel-icon">‚ñº</span>
                </div>
                <div class="panel-content" id="alarms-panel-content">
                    <div id="alarms-list">
                        <div class="alarm-entry info">
                            <span class="alarm-time">12:34</span>
                            <span class="alarm-message">SCADA/DCS rendszer elind√≠tva</span>
                        </div>
                        <div class="alarm-entry info">
                            <span class="alarm-time">12:35</span>
                            <span class="alarm-message">AI-PID tanul√°s aktiv√°lva</span>
                        </div>
                    </div>
                    
                    <div style="margin-top: 15px;">
                        <button class="control-button" onclick="acknowledgeAlarms()">‚úì Nyugt√°z√°s</button>
                        <button class="control-button" onclick="clearAlarms()">üóëÔ∏è T√∂rl√©s</button>
                        <button class="control-button" onclick="printAlarms()">üñ®Ô∏è Print</button>
                    </div>
                </div>
            </div>

            <div class="trends-panel">
                <div class="panel-header" onclick="toggleCollapse('trends-panel')">
                    <h3>üìà Val√≥s Idej≈± Trendek</h3>
                    <span class="collapse-icon expanded" id="trends-panel-icon">‚ñº</span>
                </div>
                <div class="panel-content" id="trends-panel-content">
                    <div class="trend-chart">
                        <canvas id="temp-trend" width="300" height="150"></canvas>
                    </div>
                    
                    <div class="trend-chart">
                        <canvas id="pressure-trend" width="300" height="150"></canvas>
                    </div>

                    <div class="trend-chart">
                        <canvas id="pid-trend" width="300" height="150"></canvas>
                    </div>

                    <div style="margin-top: 15px;">
                        <div class="control-row">
                            <span class="control-label">Id≈ëtartam:</span>
                            <select class="control-input" id="trend-timespan" onchange="updateTrendTimespan()">
                                <option value="1">1 perc (60 pont)</option>
                                <option value="5">5 perc (300 pont)</option>
                                <option value="10" selected>10 perc (600 pont)</option>
                                <option value="30">30 perc (1800 pont)</option>
                            </select>
                        </div>
                        <div style="margin-top: 10px; font-size: 9px; color: var(--text-secondary); text-align: center;">
                            üìä Friss√≠t√©s: 5 m√°sodpercenk√©nt | Adatpontok: utols√≥ 20 m√©r√©s
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // SCADA/DCS System Variables
        let isRunning = true;
        let maintenanceMode = false;
        let aiLearningActive = true;
        let alarmCount = 2;
        let currentView = 'overview';
        
        // Process Variables
        let processData = {
            temperature: 65.2,
            pressure: 5.2,
            flow: 3.2,
            tempSetpoint: 65.0,
            pressureSetpoint: 5.0,
            flowSetpoint: 3.0,
            reactorTemp: 65.2,
            hxOutletTemp: 42.8,
            tankTemp: 38.5,
            reactorPressure: 5.2,
            linePressure: 4.8,
            mainFlow: 3.2,
            bypassFlow: 1.8
        };

        // AI Controller
        let aiController = {
            mode: 'neural',
            learning: true,
            iterations: 0,
            kp: 1.2,
            ki: 0.15,
            kd: 0.25,
            performance: 0.95,
            // PID state variables
            tempError: 0,
            tempErrorPrev: 0,
            tempIntegral: 0,
            pressureError: 0,
            pressureErrorPrev: 0,
            pressureIntegral: 0,
            flowError: 0,
            flowErrorPrev: 0,
            flowIntegral: 0
        };

        // Chart objects
        let tempTrendChart = null;
        let pressureTrendChart = null;
        let pidTrendChart = null;

        // Main Functions
        function openPIDModal() {
            const modal = document.getElementById('pid-modal-overlay');
            if (modal) {
                modal.classList.add('show');
                updatePIDModal();
                addNeuralLog('[UI] PID param√©terek ablak megnyitva', '#00ffff');
            }
        }

        function closePIDModal() {
            const modal = document.getElementById('pid-modal-overlay');
            if (modal) {
                modal.classList.remove('show');
                addNeuralLog('[UI] PID param√©terek ablak bez√°rva', '#00ffff');
            }
        }

        function updatePIDModal() {
            // Update global PID parameters
            const modalKp = document.getElementById('modal-pid-kp');
            const modalKi = document.getElementById('modal-pid-ki');
            const modalKd = document.getElementById('modal-pid-kd');
            const modalPerformance = document.getElementById('modal-pid-performance');
            
            if (modalKp) modalKp.textContent = aiController.kp.toFixed(3);
            if (modalKi) modalKi.textContent = aiController.ki.toFixed(4);
            if (modalKd) modalKd.textContent = aiController.kd.toFixed(3);
            if (modalPerformance) modalPerformance.textContent = (aiController.performance * 100).toFixed(1) + '%';
            
            // Update temperature control status
            const tempError = document.getElementById('modal-temp-error');
            const tempIntegral = document.getElementById('modal-temp-integral');
            const tempDerivative = document.getElementById('modal-temp-derivative');
            
            if (tempError) tempError.textContent = aiController.tempError.toFixed(2) + '¬∞C';
            if (tempIntegral) tempIntegral.textContent = aiController.tempIntegral.toFixed(2);
            if (tempDerivative) tempDerivative.textContent = (aiController.tempError - aiController.tempErrorPrev).toFixed(3);
            
            // Update pressure control status
            const pressureError = document.getElementById('modal-pressure-error');
            const pressureIntegral = document.getElementById('modal-pressure-integral');
            const pressureDerivative = document.getElementById('modal-pressure-derivative');
            
            if (pressureError) pressureError.textContent = aiController.pressureError.toFixed(2) + ' bar';
            if (pressureIntegral) pressureIntegral.textContent = aiController.pressureIntegral.toFixed(2);
            if (pressureDerivative) pressureDerivative.textContent = (aiController.pressureError - aiController.pressureErrorPrev).toFixed(3);
            
            // Update flow control status
            const flowError = document.getElementById('modal-flow-error');
            const flowIntegral = document.getElementById('modal-flow-integral');
            const flowDerivative = document.getElementById('modal-flow-derivative');
            
            if (flowError) flowError.textContent = aiController.flowError.toFixed(2) + ' L/min';
            if (flowIntegral) flowIntegral.textContent = aiController.flowIntegral.toFixed(2);
            if (flowDerivative) flowDerivative.textContent = (aiController.flowError - aiController.flowErrorPrev).toFixed(3);
        }

        function goToControlView() {
            // Close modal first
            closePIDModal();
            
            // Switch to control view
            switchView('control');
            
            // Expand the setpoints section if collapsed
            const setpointsContent = document.getElementById('setpoints-content');
            const setpointsIcon = document.getElementById('setpoints-icon');
            
            if (setpointsContent && setpointsContent.classList.contains('collapsed')) {
                setpointsContent.classList.remove('collapsed');
                if (setpointsIcon) setpointsIcon.classList.add('expanded');
            }
            
            // Highlight the setpoints section briefly
            setTimeout(() => {
                const setpointsSection = document.querySelector('[onclick="toggleCollapse(\'setpoints\')"]');
                if (setpointsSection) {
                    setpointsSection.style.background = 'rgba(59, 130, 246, 0.3)';
                    setpointsSection.style.transform = 'scale(1.02)';
                    setpointsSection.style.boxShadow = '0 0 15px rgba(59, 130, 246, 0.5)';
                    
                    setTimeout(() => {
                        setpointsSection.style.background = '';
                        setpointsSection.style.transform = '';
                        setpointsSection.style.boxShadow = '';
                    }, 2000);
                }
            }, 100);
            
            addNeuralLog('[NAVIGATE] Ugr√°s a vez√©rl√©s n√©zethez', '#00ffff');
            addAlarm('info', 'Navig√°l√°s: Vez√©rl√©s n√©zet', getCurrentTime());
        }

        function toggleCollapse(sectionId) {
            const content = document.getElementById(sectionId + '-content');
            const icon = document.getElementById(sectionId + '-icon');
            
            if (content && icon) {
                if (content.classList.contains('collapsed')) {
                    content.classList.remove('collapsed');
                    icon.classList.add('expanded');
                    addNeuralLog(`[UI] ${sectionId} panel kibontva`, '#00ffff');
                } else {
                    content.classList.add('collapsed');
                    icon.classList.remove('expanded');
                    addNeuralLog(`[UI] ${sectionId} panel √∂sszecsukva`, '#00ffff');
                }
            }
        }

        function switchView(view) {
            currentView = view;
            
            // Update active button
            const buttons = document.querySelectorAll('.toolbar-button');
            buttons.forEach(btn => btn.classList.remove('active'));
            
            // Find and activate the correct button
            const viewTexts = {
                'overview': '√Åttekint√©s',
                'trends': 'Trendek',
                'alarms': 'Riaszt√°sok', 
                'control': 'Vez√©rl√©s'
            };
            
            buttons.forEach(btn => {
                if (btn.textContent.includes(viewTexts[view])) {
                    btn.classList.add('active');
                }
            });
            
            // Reset panels to default state
            const sidebar = document.querySelector('.sidebar');
            const processOverview = document.querySelector('.process-overview');
            const rightPanel = document.querySelector('.right-panel');
            const alarmsPanel = document.querySelector('.alarms-panel');
            const trendsPanel = document.querySelector('.trends-panel');
            
            if (sidebar) sidebar.style.display = 'block';
            if (processOverview) processOverview.style.display = 'block';
            if (rightPanel) rightPanel.style.display = 'flex';
            if (alarmsPanel) {
                alarmsPanel.style.display = 'block';
                alarmsPanel.style.height = '40%';
            }
            if (trendsPanel) {
                trendsPanel.style.display = 'block';
                trendsPanel.style.height = '60%';
            }
            
            // Scroll to and highlight relevant sections
            switch(view) {
                case 'overview':
                    // Scroll to top and show process overview
                    if (processOverview) {
                        processOverview.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        // Brief highlight
                        processOverview.style.boxShadow = '0 0 20px rgba(59, 130, 246, 0.6)';
                        setTimeout(() => processOverview.style.boxShadow = '', 2000);
                    }
                    addNeuralLog('[VIEW] √Åttekint√©s n√©zet - process diagram f√≥kuszban', '#00ffff');
                    break;
                    
                case 'trends':
                    // Scroll to trends panel and expand it
                    if (trendsPanel) {
                        alarmsPanel.style.display = 'none';
                        trendsPanel.style.height = '100%';
                        
                        // Expand trends panel if collapsed
                        const trendsContent = document.getElementById('trends-panel-content');
                        const trendsIcon = document.getElementById('trends-panel-icon');
                        if (trendsContent && trendsContent.classList.contains('collapsed')) {
                            trendsContent.classList.remove('collapsed');
                            if (trendsIcon) trendsIcon.classList.add('expanded');
                        }
                        
                        // Scroll to trends panel
                        trendsPanel.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        
                        // Highlight trends panel
                        trendsPanel.style.boxShadow = '0 0 20px rgba(16, 185, 129, 0.6)';
                        setTimeout(() => trendsPanel.style.boxShadow = '', 2000);
                    }
                    addNeuralLog('[VIEW] Trendek n√©zet - grafikonok teljes m√©retben', '#00ffff');
                    break;
                    
                case 'alarms':
                    // Scroll to alarms panel and expand it
                    if (alarmsPanel) {
                        trendsPanel.style.display = 'none';
                        alarmsPanel.style.height = '100%';
                        
                        // Expand alarms panel if collapsed
                        const alarmsContent = document.getElementById('alarms-panel-content');
                        const alarmsIcon = document.getElementById('alarms-panel-icon');
                        if (alarmsContent && alarmsContent.classList.contains('collapsed')) {
                            alarmsContent.classList.remove('collapsed');
                            if (alarmsIcon) alarmsIcon.classList.add('expanded');
                        }
                        
                        // Scroll to alarms panel
                        alarmsPanel.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        
                        // Highlight alarms panel
                        alarmsPanel.style.boxShadow = '0 0 20px rgba(220, 38, 38, 0.6)';
                        setTimeout(() => alarmsPanel.style.boxShadow = '', 2000);
                    }
                    addNeuralLog('[VIEW] Riaszt√°sok n√©zet - esem√©nyek teljes m√©retben', '#00ffff');
                    break;
                    
                case 'control':
                    // Scroll to sidebar and expand control sections
                    if (sidebar) {
                        sidebar.scrollIntoView({ behavior: 'smooth', block: 'start' });
                        
                        // Expand setpoints and AI control sections
                        const setpointsContent = document.getElementById('setpoints-content');
                        const setpointsIcon = document.getElementById('setpoints-icon');
                        const aiControlContent = document.getElementById('ai-control-content');
                        const aiControlIcon = document.getElementById('ai-control-icon');
                        
                        if (setpointsContent && setpointsContent.classList.contains('collapsed')) {
                            setpointsContent.classList.remove('collapsed');
                            if (setpointsIcon) setpointsIcon.classList.add('expanded');
                        }
                        
                        if (aiControlContent && aiControlContent.classList.contains('collapsed')) {
                            aiControlContent.classList.remove('collapsed');
                            if (aiControlIcon) aiControlIcon.classList.add('expanded');
                        }
                        
                        // Highlight setpoints section after a brief delay
                        setTimeout(() => {
                            const setpointsHeader = document.querySelector('[onclick="toggleCollapse(\'setpoints\')"]');
                            if (setpointsHeader) {
                                setpointsHeader.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                setpointsHeader.style.boxShadow = '0 0 20px rgba(251, 191, 36, 0.6)';
                                setTimeout(() => setpointsHeader.style.boxShadow = '', 2000);
                            }
                        }, 500);
                    }
                    addNeuralLog('[VIEW] Vez√©rl√©s n√©zet - setpoint-ok √©s AI vez√©rl√©s akt√≠v', '#00ffff');
                    break;
            }
            
            addAlarm('info', `N√©zet v√°lt√°s: ${viewTexts[view]}`, getCurrentTime());
        }

        function toggleMaintenance() {
            maintenanceMode = !maintenanceMode;
            
            if (maintenanceMode) {
                addNeuralLog('[MAINTENANCE] Karbantart√°si m√≥d AKT√çV', '#ff8800');
                addAlarm('warning', 'Karbantart√°si m√≥d aktiv√°lva', getCurrentTime());
                
                // Update button appearance
                const maintenanceBtn = document.querySelector('[onclick="toggleMaintenance()"]');
                if (maintenanceBtn) {
                    maintenanceBtn.textContent = 'üîß Karbantart√°s (AKT√çV)';
                    maintenanceBtn.style.backgroundColor = 'var(--warning-yellow)';
                    maintenanceBtn.style.color = 'black';
                }
            } else {
                addNeuralLog('[MAINTENANCE] Karbantart√°si m√≥d INAKT√çV', '#00ffff');
                addAlarm('info', 'Karbantart√°si m√≥d kikapcsolva', getCurrentTime());
                
                // Reset button appearance
                const maintenanceBtn = document.querySelector('[onclick="toggleMaintenance()"]');
                if (maintenanceBtn) {
                    maintenanceBtn.textContent = 'üîß Karbantart√°s';
                    maintenanceBtn.style.backgroundColor = '';
                    maintenanceBtn.style.color = '';
                }
            }
        }

        function exportReport() {
            console.log('exportReport function called');
            addNeuralLog('[EXPORT] Jelent√©s gener√°l√°s ind√≠tva...', '#ffff00');
            
            const reportContent = `SCADA/DCS SYSTEM REPORT
Generated: ${new Date().toLocaleString('hu-HU')}
==============================================

PROCESS STATUS:
- Reactor Temperature: ${processData.reactorTemp.toFixed(2)}¬∞C (SP: ${processData.tempSetpoint}¬∞C)
- Reactor Pressure: ${processData.reactorPressure.toFixed(2)} bar (SP: ${processData.pressureSetpoint} bar)
- Main Flow: ${processData.mainFlow.toFixed(2)} L/min (SP: ${processData.flowSetpoint} L/min)

AI-PID CONTROLLER:
- Mode: ${aiController.mode}
- Learning: ${aiLearningActive ? 'ACTIVE' : 'INACTIVE'}
- Performance: ${(aiController.performance * 100).toFixed(1)}%
- Kp: ${aiController.kp.toFixed(3)}
- Ki: ${aiController.ki.toFixed(4)}
- Kd: ${aiController.kd.toFixed(3)}

SYSTEM STATUS:
- Active Alarms: ${alarmCount}
- Maintenance Mode: ${maintenanceMode ? 'ACTIVE' : 'INACTIVE'}
- Current View: ${currentView}
- Operator: Admin
- Report ID: RPT-${Date.now()}

DETAILED SENSOR READINGS:
- TI-101: ${processData.reactorTemp.toFixed(2)}¬∞C
- TI-102: ${processData.hxOutletTemp.toFixed(2)}¬∞C
- TI-103: ${processData.tankTemp.toFixed(2)}¬∞C
- PI-201: ${processData.reactorPressure.toFixed(2)} bar
- PI-202: ${processData.linePressure.toFixed(2)} bar
- FI-301: ${processData.mainFlow.toFixed(2)} L/min
- FI-302: ${processData.bypassFlow.toFixed(2)} L/min`;
            
            console.log('Report content generated, length:', reportContent.length);
            
            // Egyszer≈± m√≥dszer: azonnal megjelen√≠tj√ºk modal-ban
            showReportModal(reportContent);
        }

        function showReportModal(reportContent) {
            console.log('showReportModal called');
            
            // Remove any existing report modal
            const existingModal = document.getElementById('report-modal');
            if (existingModal) {
                existingModal.remove();
            }
            
            // Create modal for report display
            const modal = document.createElement('div');
            modal.id = 'report-modal';
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background: rgba(0,0,0,0.8); z-index: 3000; display: flex;
                align-items: center; justify-content: center; padding: 20px;
                animation: fadeIn 0.3s ease;
            `;
            
            const content = document.createElement('div');
            content.style.cssText = `
                background: #1e293b; border: 2px solid #3b82f6; border-radius: 8px; 
                padding: 20px; max-width: 900px; max-height: 80vh; overflow-y: auto; 
                font-family: 'Courier New', monospace; color: #f1f5f9;
                box-shadow: 0 10px 30px rgba(0,0,0,0.5);
            `;
            
            content.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; border-bottom: 1px solid #3b82f6; padding-bottom: 10px;">
                    <h3 style="margin: 0; color: #3b82f6; font-size: 18px;">üìã SCADA Rendszer Jelent√©s</h3>
                    <button id="close-report" style="background: #dc2626; color: white; border: none; border-radius: 4px; padding: 8px 12px; cursor: pointer; font-weight: bold;">‚úï Bez√°r√°s</button>
                </div>
                <pre style="background: #0f172a; padding: 15px; border-radius: 4px; font-size: 11px; line-height: 1.4; color: #00ff00; border: 1px solid #374151; margin: 0; white-space: pre-wrap;">${reportContent}</pre>
                <div style="text-align: center; margin-top: 15px; display: flex; gap: 10px; justify-content: center;">
                    <button id="copy-report" style="padding: 8px 16px; background: #16a34a; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: bold;">üìã M√°sol√°s</button>
                    <button id="download-report" style="padding: 8px 16px; background: #2563eb; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: bold;">üíæ Let√∂lt√©s</button>
                </div>
            `;
            
            modal.appendChild(content);
            document.body.appendChild(modal);
            
            // Event listeners
            document.getElementById('close-report').onclick = function() {
                modal.remove();
                addNeuralLog('[EXPORT] Jelent√©s ablak bez√°rva', '#00ffff');
            };
            
            document.getElementById('copy-report').onclick = function() {
                if (navigator.clipboard) {
                    navigator.clipboard.writeText(reportContent).then(() => {
                        addNeuralLog('[EXPORT] Jelent√©s v√°g√≥lapra m√°solva', '#00ff00');
                        this.textContent = '‚úÖ M√°solva!';
                        setTimeout(() => this.textContent = 'üìã M√°sol√°s', 2000);
                    }).catch(() => {
                        addNeuralLog('[EXPORT] V√°g√≥lap hiba', '#ff0000');
                    });
                }
            };
            
            document.getElementById('download-report').onclick = function() {
                try {
                    const blob = new Blob([reportContent], { type: 'text/plain;charset=utf-8' });
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = `SCADA_Report_${new Date().toISOString().split('T')[0]}.txt`;
                    link.style.display = 'none';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);
                    
                    addNeuralLog('[EXPORT] Jelent√©s let√∂ltve', '#00ff00');
                    this.textContent = '‚úÖ Let√∂ltve!';
                    setTimeout(() => this.textContent = 'üíæ Let√∂lt√©s', 2000);
                } catch (error) {
                    addNeuralLog(`[EXPORT] Let√∂lt√©s hiba: ${error.message}`, '#ff0000');
                }
            };
            
            // Close on background click
            modal.onclick = function(e) {
                if (e.target === modal) {
                    modal.remove();
                }
            };
            
            addNeuralLog('[EXPORT] Jelent√©s ablak megnyitva', '#00ff00');
            addAlarm('info', 'Rendszer jelent√©s gener√°lva', getCurrentTime());
        }

        function acknowledgeAlarms() {
            const alarms = document.querySelectorAll('.alarm-entry');
            alarms.forEach(alarm => {
                alarm.style.opacity = '0.6';
                alarm.style.background = 'rgba(100, 116, 139, 0.2)';
            });
            
            addNeuralLog('[ALARM] Riaszt√°sok nyugt√°zva', '#00ffff');
            
            // Update alarm indicator
            const alarmIndicator = document.getElementById('alarm-status');
            if (alarmIndicator) {
                alarmIndicator.className = 'alarm-indicator';
            }
        }

        function clearAlarms() {
            const alarmsList = document.getElementById('alarms-list');
            if (alarmsList) {
                alarmsList.innerHTML = '';
            }
            alarmCount = 0;
            updateAlarmDisplay();
            addNeuralLog('[ALARM] Riaszt√°sok t√∂r√∂lve', '#00ffff');
        }

        function printAlarms() {
            addNeuralLog('[PRINT] Riaszt√°s lista nyomtat√°sa', '#00ffff');
            window.print();
        }

        function toggleAILearning() {
            aiLearningActive = !aiLearningActive;
            const btn = document.getElementById('ai-learn-btn');
            
            if (btn) {
                if (aiLearningActive) {
                    btn.textContent = 'AKT√çV';
                    btn.className = 'control-button success';
                    addNeuralLog('[AI-LEARN] Tanul√°s bekapcsolva', '#00ff00');
                } else {
                    btn.textContent = 'LE√ÅLL√çTVA';
                    btn.className = 'control-button danger';
                    addNeuralLog('[AI-LEARN] Tanul√°s le√°ll√≠tva', '#ff8800');
                }
            }
            
            addAlarm('info', `AI tanul√°s: ${aiLearningActive ? 'AKT√çV' : 'LE√ÅLL√çTVA'}`, getCurrentTime());
        }

        function tunePID() {
            // Simulate auto-tuning with slight variations
            aiController.kp += (Math.random() - 0.5) * 0.1;
            aiController.ki += (Math.random() - 0.5) * 0.02;
            aiController.kd += (Math.random() - 0.5) * 0.05;
            
            // Keep values within reasonable bounds
            aiController.kp = Math.max(0.5, Math.min(3.0, aiController.kp));
            aiController.ki = Math.max(0.05, Math.min(0.5, aiController.ki));
            aiController.kd = Math.max(0.1, Math.min(1.0, aiController.kd));
            
            // Update performance
            aiController.performance = Math.min(0.99, aiController.performance + (Math.random() * 0.02));
            
            updatePIDDisplay();
            addNeuralLog(`[PID-TUNE] Kp=${aiController.kp.toFixed(3)} Ki=${aiController.ki.toFixed(4)} Kd=${aiController.kd.toFixed(3)}`, '#ffff00');
            addAlarm('info', 'PID param√©terek automatikus hangol√°sa befejezve', getCurrentTime());
        }

        function updatePIDDisplay() {
            // Update PID parameter display
            const kpElement = document.getElementById('pid-kp');
            const kiElement = document.getElementById('pid-ki');
            const kdElement = document.getElementById('pid-kd');
            const performanceElement = document.getElementById('pid-performance');
            
            if (kpElement) kpElement.textContent = aiController.kp.toFixed(3);
            if (kiElement) kiElement.textContent = aiController.ki.toFixed(4);
            if (kdElement) kdElement.textContent = aiController.kd.toFixed(3);
            if (performanceElement) performanceElement.textContent = (aiController.performance * 100).toFixed(1) + '%';
        }

        function resetAI() {
            aiController.iterations = 0;
            aiController.kp = 1.2;
            aiController.ki = 0.15;
            aiController.kd = 0.25;
            aiController.performance = 0.95;
            
            // Reset PID state variables
            aiController.tempError = 0;
            aiController.tempErrorPrev = 0;
            aiController.tempIntegral = 0;
            aiController.pressureError = 0;
            aiController.pressureErrorPrev = 0;
            aiController.pressureIntegral = 0;
            aiController.flowError = 0;
            aiController.flowErrorPrev = 0;
            aiController.flowIntegral = 0;
            
            updatePIDDisplay();
            addNeuralLog('[AI-RESET] AI rendszer √©s PID √°llapot √∫jraind√≠tva', '#ffff00');
            addAlarm('info', 'AI-PID szab√°lyoz√≥ reset', getCurrentTime());
        }

        function changeAIMode() {
            const select = document.getElementById('ai-mode');
            if (select) {
                aiController.mode = select.value;
                addNeuralLog(`[AI-MODE] V√°lt√°s: ${select.value}`, '#ffff00');
                addAlarm('info', `AI m√≥d v√°lt√°s: ${select.value}`, getCurrentTime());
            }
        }

        function updateSetpoint(type) {
            let oldValue, newValue, unit, tag;
            
            switch(type) {
                case 'temp':
                    oldValue = processData.tempSetpoint;
                    newValue = parseFloat(document.getElementById('temp-setpoint').value);
                    processData.tempSetpoint = newValue;
                    unit = '¬∞C';
                    tag = 'TIC-101';
                    break;
                case 'pressure':
                    oldValue = processData.pressureSetpoint;
                    newValue = parseFloat(document.getElementById('pressure-setpoint').value);
                    processData.pressureSetpoint = newValue;
                    unit = ' bar';
                    tag = 'PIC-201';
                    break;
                case 'flow':
                    oldValue = processData.flowSetpoint;
                    newValue = parseFloat(document.getElementById('flow-setpoint').value);
                    processData.flowSetpoint = newValue;
                    unit = ' L/min';
                    tag = 'FIC-301';
                    break;
            }
            
            // Validation and status update
            updateSetpointStatus(type, newValue);
            
            // Log the change
            addNeuralLog(`[SETPOINT] ${tag}: ${oldValue}${unit} ‚Üí ${newValue}${unit}`, '#00ffff');
            addAlarm('info', `Setpoint m√≥dos√≠tva: ${tag} = ${newValue}${unit}`, getCurrentTime());
            
            // Reset integral terms when setpoint changes to avoid windup
            if (type === 'temp') {
                aiController.tempIntegral = 0;
                addNeuralLog('[PID-TEMP] Integr√°l tag resetelve setpoint v√°ltoz√°s miatt', '#ffff00');
            } else if (type === 'pressure') {
                aiController.pressureIntegral = 0;
                addNeuralLog('[PID-PRESS] Integr√°l tag resetelve setpoint v√°ltoz√°s miatt', '#ffff00');
            } else if (type === 'flow') {
                aiController.flowIntegral = 0;
                addNeuralLog('[PID-FLOW] Integr√°l tag resetelve setpoint v√°ltoz√°s miatt', '#ffff00');
            }
            
            // Visual feedback
            const input = document.getElementById(`${type}-setpoint`);
            if (input) {
                input.style.borderColor = 'var(--success-green)';
                input.style.boxShadow = '0 0 5px rgba(34, 197, 94, 0.3)';
                setTimeout(() => {
                    input.style.borderColor = 'var(--border-color)';
                    input.style.boxShadow = 'none';
                }, 1000);
            }
        }

        function previewSetpoint(type) {
            const input = document.getElementById(`${type}-setpoint`);
            const value = parseFloat(input.value);
            
            // Real-time validation without applying
            updateSetpointStatus(type, value, true);
        }

        function updateSetpointStatus(type, value, preview = false) {
            const statusElement = document.getElementById(`${type}-status`);
            if (!statusElement) return;
            
            let status = 'OK';
            let color = 'var(--status-green)';
            
            switch(type) {
                case 'temp':
                    if (value < 20 || value > 100) {
                        status = 'TARTOM√ÅNYON K√çV√úL';
                        color = 'var(--danger-red)';
                    } else if (value > 80) {
                        status = 'MAGAS';
                        color = 'var(--warning-yellow)';
                    } else if (value < 30) {
                        status = 'ALACSONY';
                        color = 'var(--warning-yellow)';
                    }
                    break;
                case 'pressure':
                    if (value < 0 || value > 15) {
                        status = 'TARTOM√ÅNYON K√çV√úL';
                        color = 'var(--danger-red)';
                    } else if (value > 10) {
                        status = 'MAGAS';
                        color = 'var(--warning-yellow)';
                    } else if (value < 1) {
                        status = 'ALACSONY';
                        color = 'var(--warning-yellow)';
                    }
                    break;
                case 'flow':
                    if (value < 0 || value > 10) {
                        status = 'TARTOM√ÅNYON K√çV√úL';
                        color = 'var(--danger-red)';
                    } else if (value > 8) {
                        status = 'MAGAS';
                        color = 'var(--warning-yellow)';
                    } else if (value < 0.5) {
                        status = 'ALACSONY';
                        color = 'var(--warning-yellow)';
                    }
                    break;
            }
            
            statusElement.textContent = preview ? `${status} (el≈ën√©zet)` : status;
            statusElement.style.color = color;
        }

        function setQuickSetpoints(mode) {
            let tempSP, pressureSP, flowSP;
            
            switch(mode) {
                case 'normal':
                    tempSP = 65.0;
                    pressureSP = 5.0;
                    flowSP = 3.0;
                    addNeuralLog('[QUICK-SET] Norm√°l √ºzemm√≥d be√°ll√≠tva', '#00ffff');
                    break;
                case 'high':
                    tempSP = 75.0;
                    pressureSP = 7.5;
                    flowSP = 4.5;
                    addNeuralLog('[QUICK-SET] Magas teljes√≠tm√©ny be√°ll√≠tva', '#ffff00');
                    break;
                case 'low':
                    tempSP = 45.0;
                    pressureSP = 3.0;
                    flowSP = 1.5;
                    addNeuralLog('[QUICK-SET] Alacsony teljes√≠tm√©ny be√°ll√≠tva', '#00ffff');
                    break;
                case 'emergency':
                    tempSP = 25.0;
                    pressureSP = 1.0;
                    flowSP = 0.5;
                    addNeuralLog('[QUICK-SET] V√âSZHELYZETI le√°ll√≠t√°s be√°ll√≠tva', '#ff0000');
                    addAlarm('warning', 'V√©szhelyzeti setpoint-ok aktiv√°lva', getCurrentTime());
                    break;
            }
            
            // Update input fields
            document.getElementById('temp-setpoint').value = tempSP;
            document.getElementById('pressure-setpoint').value = pressureSP;
            document.getElementById('flow-setpoint').value = flowSP;
            
            // Apply the setpoints
            processData.tempSetpoint = tempSP;
            processData.pressureSetpoint = pressureSP;
            processData.flowSetpoint = flowSP;
            
            // Update status for all
            updateSetpointStatus('temp', tempSP);
            updateSetpointStatus('pressure', pressureSP);
            updateSetpointStatus('flow', flowSP);
            
            // Visual feedback for all inputs
            ['temp', 'pressure', 'flow'].forEach(type => {
                const input = document.getElementById(`${type}-setpoint`);
                if (input) {
                    input.style.borderColor = mode === 'emergency' ? 'var(--danger-red)' : 'var(--success-green)';
                    input.style.boxShadow = mode === 'emergency' ? 
                        '0 0 8px rgba(220, 38, 38, 0.5)' : 
                        '0 0 5px rgba(34, 197, 94, 0.3)';
                    setTimeout(() => {
                        input.style.borderColor = 'var(--border-color)';
                        input.style.boxShadow = 'none';
                    }, 2000);
                }
            });
            
            addAlarm('info', `Gyors be√°ll√≠t√°s alkalmazva: ${mode.toUpperCase()}`, getCurrentTime());
        }

        function toggleSidebar() {
            const sidebar = document.querySelector('.sidebar');
            const mainContainer = document.querySelector('.main-container');
            
            if (sidebar.style.display === 'none') {
                sidebar.style.display = 'block';
                mainContainer.style.gridTemplateColumns = '300px 1fr 350px';
                addNeuralLog('[UI] Kontroll panel megjelen√≠tve', '#00ffff');
            } else {
                sidebar.style.display = 'none';
                mainContainer.style.gridTemplateColumns = '1fr 350px';
                addNeuralLog('[UI] Kontroll panel elrejtve', '#00ffff');
            }
        }

        function updateTrendTimespan() {
            const select = document.getElementById('trend-timespan');
            if (select) {
                const minutes = select.value;
                addNeuralLog(`[TREND] Id≈ëtartam be√°ll√≠tva: ${minutes} perc`, '#00ffff');
                
                // Calculate how many data points that represents
                const totalPoints = (minutes * 60) / 5; // 5 sec intervals
                addNeuralLog(`[TREND] Elm√©leti adatpontok: ${totalPoints} (jelenleg csak 20 pont t√°rolva)`, '#ffff00');
            }
        }

        function showEquipmentInfo(equipment) {
            const equipmentNames = {
                'reactor': 'R-001 Reaktor',
                'hx': 'HX-001 H≈ëcser√©l≈ë',
                'pump': 'P-001 Pumpa',
                'valve': 'V-001 Szelep',
                'tank': 'T-001 Tank'
            };
            
            addNeuralLog(`[EQUIPMENT] ${equipmentNames[equipment]} inform√°ci√≥ megjelen√≠tve`, '#00ffff');
            
            alert(`${equipmentNames[equipment]} Inform√°ci√≥:
            
√Ållapot: M≈±k√∂dik
Hat√©konys√°g: 95%
Utols√≥ karbantart√°s: 2024-05-15
K√∂vetkez≈ë karbantart√°s: 2024-08-15

Tov√°bbi r√©szletek a berendez√©s dokument√°ci√≥j√°ban.`);
        }

        function showSensorInfo(sensorId) {
            const sensorData = {
                'TI-101': { value: processData.reactorTemp, unit: '¬∞C', name: 'Reaktor H≈ëm√©rs√©klet' },
                'TI-102': { value: processData.hxOutletTemp, unit: '¬∞C', name: 'H≈ëcser√©l≈ë Kimenet' },
                'PI-201': { value: processData.reactorPressure, unit: ' bar', name: 'Reaktor Nyom√°s' },
                'PI-202': { value: processData.linePressure, unit: ' bar', name: 'Vezet√©k Nyom√°s' },
                'FI-301': { value: processData.mainFlow, unit: ' L/min', name: 'F≈ë √Åraml√°s' }
            };
            
            const sensor = sensorData[sensorId];
            if (sensor) {
                addNeuralLog(`[SENSOR] ${sensorId} inform√°ci√≥ megjelen√≠tve`, '#00ffff');
                
                alert(`${sensorId} - ${sensor.name}
                
Aktu√°lis √©rt√©k: ${sensor.value.toFixed(2)}${sensor.unit}
M√©r√©si tartom√°ny: 0-200${sensor.unit}
Pontoss√°g: ¬±0.1${sensor.unit}
Utols√≥ kalibr√°l√°s: 2024-04-15
K√∂vetkez≈ë kalibr√°l√°s: 2024-10-15

Senzor √°llapot: OK`);
            }
        }

        // Helper Functions
        function getCurrentTime() {
            return new Date().toLocaleTimeString('hu-HU', {
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function addNeuralLog(message, color = '#00ff00') {
            const log = document.getElementById('neural-log');
            if (log) {
                const div = document.createElement('div');
                div.style.color = color;
                div.textContent = `[${getCurrentTime()}] ${message}`;
                log.appendChild(div);
                log.scrollTop = log.scrollHeight;
                
                // Keep only last 10 entries
                while (log.children.length > 10) {
                    log.removeChild(log.firstChild);
                }
            }
        }

        function addAlarm(severity, message, time) {
            const alarmsList = document.getElementById('alarms-list');
            if (alarmsList) {
                const alarmEntry = document.createElement('div');
                alarmEntry.className = `alarm-entry ${severity}`;
                alarmEntry.innerHTML = `
                    <span class="alarm-time">${time}</span>
                    <span class="alarm-message">${message}</span>
                `;
                
                alarmsList.insertBefore(alarmEntry, alarmsList.firstChild);
                
                // Limit alarm list size
                while (alarmsList.children.length > 20) {
                    alarmsList.removeChild(alarmsList.lastChild);
                }
                
                alarmCount++;
                updateAlarmDisplay();
            }
        }

        function updateAlarmDisplay() {
            const alarmCountElement = document.getElementById('alarm-count');
            const alarmStatus = document.getElementById('alarm-status');
            
            if (alarmCountElement) {
                alarmCountElement.textContent = alarmCount;
            }
            
            if (alarmStatus) {
                if (alarmCount === 0) {
                    alarmStatus.className = 'alarm-indicator';
                } else if (alarmCount < 5) {
                    alarmStatus.className = 'alarm-indicator warning';
                } else {
                    alarmStatus.className = 'alarm-indicator critical';
                }
            }
        }

        function updateSystemTime() {
            const timeElement = document.getElementById('system-time');
            if (timeElement) {
                const now = new Date();
                const timeString = now.toLocaleTimeString('hu-HU', {
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                });
                timeElement.textContent = timeString;
            }
        }

        function updateProcessData() {
            // PID Control for Temperature
            pidControlTemperature();
            
            // PID Control for Pressure  
            pidControlPressure();
            
            // PID Control for Flow
            pidControlFlow();
            
            // Add some process noise
            processData.reactorTemp += (Math.random() - 0.5) * 0.1;
            processData.hxOutletTemp = processData.reactorTemp - 20 + (Math.random() - 0.5) * 2;
            processData.tankTemp = processData.hxOutletTemp - 5 + (Math.random() - 0.5) * 1;
            processData.reactorPressure += (Math.random() - 0.5) * 0.05;
            processData.linePressure = processData.reactorPressure - 0.3 + (Math.random() - 0.5) * 0.1;
            processData.mainFlow += (Math.random() - 0.5) * 0.05;
            processData.bypassFlow = processData.mainFlow * 0.6 + (Math.random() - 0.5) * 0.1;
            
            // Update displays
            document.getElementById('tag-ti101').textContent = processData.reactorTemp.toFixed(1) + '¬∞C';
            document.getElementById('tag-ti102').textContent = processData.hxOutletTemp.toFixed(1) + '¬∞C';
            document.getElementById('tag-ti103').textContent = processData.tankTemp.toFixed(1) + '¬∞C';
            document.getElementById('tag-pi201').textContent = processData.reactorPressure.toFixed(1) + ' bar';
            document.getElementById('tag-pi202').textContent = processData.linePressure.toFixed(1) + ' bar';
            document.getElementById('tag-fi301').textContent = processData.mainFlow.toFixed(1) + ' L/min';
            document.getElementById('tag-fi302').textContent = processData.bypassFlow.toFixed(1) + ' L/min';
            
            document.getElementById('pv-temp1').textContent = processData.reactorTemp.toFixed(1) + '¬∞C';
            document.getElementById('pv-temp2').textContent = processData.hxOutletTemp.toFixed(1) + '¬∞C';
            document.getElementById('pv-flow1').textContent = processData.mainFlow.toFixed(1) + ' L/min';
            document.getElementById('pv-pressure1').textContent = processData.reactorPressure.toFixed(1) + ' bar';
            
            // Check alarm conditions
            checkAlarms();
        }

        function pidControlTemperature() {
            // Calculate error
            aiController.tempError = processData.tempSetpoint - processData.reactorTemp;
            
            // Proportional term
            const P = aiController.kp * aiController.tempError;
            
            // Integral term (with windup protection)
            aiController.tempIntegral += aiController.tempError;
            if (aiController.tempIntegral > 100) aiController.tempIntegral = 100;
            if (aiController.tempIntegral < -100) aiController.tempIntegral = -100;
            const I = aiController.ki * aiController.tempIntegral;
            
            // Derivative term
            const D = aiController.kd * (aiController.tempError - aiController.tempErrorPrev);
            
            // PID output
            const output = P + I + D;
            
            // Apply control action to reactor temperature
            const controlAction = output * 0.1; // Scale factor
            processData.reactorTemp += controlAction;
            
            // Update for next iteration
            aiController.tempErrorPrev = aiController.tempError;
            
            // Log significant control actions
            if (Math.abs(controlAction) > 0.5) {
                addNeuralLog(`[PID-TEMP] Szab√°lyoz√°s: ${controlAction.toFixed(2)}¬∞C, Hiba: ${aiController.tempError.toFixed(1)}¬∞C`, '#00ffff');
            }
        }

        function pidControlPressure() {
            // Calculate error
            aiController.pressureError = processData.pressureSetpoint - processData.reactorPressure;
            
            // Proportional term
            const P = aiController.kp * 0.8 * aiController.pressureError; // Different gain for pressure
            
            // Integral term
            aiController.pressureIntegral += aiController.pressureError;
            if (aiController.pressureIntegral > 50) aiController.pressureIntegral = 50;
            if (aiController.pressureIntegral < -50) aiController.pressureIntegral = -50;
            const I = aiController.ki * 0.5 * aiController.pressureIntegral;
            
            // Derivative term
            const D = aiController.kd * 0.3 * (aiController.pressureError - aiController.pressureErrorPrev);
            
            // PID output
            const output = P + I + D;
            
            // Apply control action
            const controlAction = output * 0.05;
            processData.reactorPressure += controlAction;
            
            // Update for next iteration
            aiController.pressureErrorPrev = aiController.pressureError;
            
            // Log significant control actions
            if (Math.abs(controlAction) > 0.2) {
                addNeuralLog(`[PID-PRESS] Szab√°lyoz√°s: ${controlAction.toFixed(2)} bar, Hiba: ${aiController.pressureError.toFixed(1)} bar`, '#00ffff');
            }
        }

        function pidControlFlow() {
            // Calculate error
            aiController.flowError = processData.flowSetpoint - processData.mainFlow;
            
            // Proportional term
            const P = aiController.kp * 0.6 * aiController.flowError;
            
            // Integral term
            aiController.flowIntegral += aiController.flowError;
            if (aiController.flowIntegral > 30) aiController.flowIntegral = 30;
            if (aiController.flowIntegral < -30) aiController.flowIntegral = -30;
            const I = aiController.ki * 0.3 * aiController.flowIntegral;
            
            // Derivative term
            const D = aiController.kd * 0.4 * (aiController.flowError - aiController.flowErrorPrev);
            
            // PID output
            const output = P + I + D;
            
            // Apply control action
            const controlAction = output * 0.08;
            processData.mainFlow += controlAction;
            
            // Update for next iteration
            aiController.flowErrorPrev = aiController.flowError;
            
            // Log significant control actions
            if (Math.abs(controlAction) > 0.1) {
                addNeuralLog(`[PID-FLOW] Szab√°lyoz√°s: ${controlAction.toFixed(2)} L/min, Hiba: ${aiController.flowError.toFixed(1)} L/min`, '#00ffff');
            }
        }

        function checkAlarms() {
            // Temperature high alarm
            if (processData.reactorTemp > 70) {
                addAlarm('critical', `Magas h≈ëm√©rs√©klet riaszt√°s - TI-101: ${processData.reactorTemp.toFixed(1)}¬∞C`, getCurrentTime());
            }
            
            // Pressure high alarm
            if (processData.reactorPressure > 8) {
                addAlarm('critical', `Magas nyom√°s riaszt√°s - PI-201: ${processData.reactorPressure.toFixed(1)} bar`, getCurrentTime());
            }
            
            // Low flow alarm
            if (processData.mainFlow < 2) {
                addAlarm('warning', `Alacsony √°raml√°s - FI-301: ${processData.mainFlow.toFixed(1)} L/min`, getCurrentTime());
            }
        }

        function initializeCharts() {
            // Initialize temperature trend chart
            const tempCtx = document.getElementById('temp-trend');
            if (tempCtx) {
                tempTrendChart = new Chart(tempCtx.getContext('2d'), {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [{
                            label: 'TI-101 Reaktor',
                            data: [],
                            borderColor: '#ef4444',
                            backgroundColor: 'rgba(239, 68, 68, 0.1)',
                            borderWidth: 2,
                            tension: 0.4
                        }, {
                            label: 'C√©l√©rt√©k',
                            data: [],
                            borderColor: '#22c55e',
                            borderDash: [5, 5],
                            borderWidth: 1,
                            fill: false
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: { color: '#f1f5f9', font: { size: 10 } }
                            },
                            title: {
                                display: true,
                                text: 'H≈ëm√©rs√©klet Trend',
                                color: '#f1f5f9',
                                font: { size: 12 }
                            }
                        },
                        scales: {
                            x: { display: false },
                            y: {
                                grid: { color: '#334155' },
                                ticks: { color: '#94a3b8', font: { size: 9 } },
                                title: {
                                    display: true,
                                    text: '¬∞C',
                                    color: '#94a3b8',
                                    font: { size: 10 }
                                }
                            }
                        }
                    }
                });
            }

            // Initialize pressure trend chart
            const pressureCtx = document.getElementById('pressure-trend');
            if (pressureCtx) {
                pressureTrendChart = new Chart(pressureCtx.getContext('2d'), {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [{
                            label: 'PI-201 Reaktor',
                            data: [],
                            borderColor: '#3b82f6',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            borderWidth: 2,
                            tension: 0.4
                        }, {
                            label: 'C√©l√©rt√©k',
                            data: [],
                            borderColor: '#22c55e',
                            borderDash: [5, 5],
                            borderWidth: 1,
                            fill: false
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: { color: '#f1f5f9', font: { size: 10 } }
                            },
                            title: {
                                display: true,
                                text: 'Nyom√°s Trend',
                                color: '#f1f5f9',
                                font: { size: 12 }
                            }
                        },
                        scales: {
                            x: { display: false },
                            y: {
                                grid: { color: '#334155' },
                                ticks: { color: '#94a3b8', font: { size: 9 } },
                                title: {
                                    display: true,
                                    text: 'bar',
                                    color: '#94a3b8',
                                    font: { size: 10 }
                                }
                            }
                        }
                    }
                });
            }

            // Initialize PID trend chart
            const pidCtx = document.getElementById('pid-trend');
            if (pidCtx) {
                pidTrendChart = new Chart(pidCtx.getContext('2d'), {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [{
                            label: 'Kp',
                            data: [],
                            borderColor: '#ef4444',
                            backgroundColor: 'rgba(239, 68, 68, 0.1)',
                            borderWidth: 2,
                            tension: 0.4,
                            yAxisID: 'y'
                        }, {
                            label: 'Ki',
                            data: [],
                            borderColor: '#3b82f6',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            borderWidth: 2,
                            tension: 0.4,
                            yAxisID: 'y1'
                        }, {
                            label: 'Kd',
                            data: [],
                            borderColor: '#10b981',
                            backgroundColor: 'rgba(16, 185, 129, 0.1)',
                            borderWidth: 2,
                            tension: 0.4,
                            yAxisID: 'y'
                        }, {
                            label: 'Teljes√≠tm√©ny %',
                            data: [],
                            borderColor: '#f59e0b',
                            backgroundColor: 'rgba(245, 158, 11, 0.1)',
                            borderWidth: 2,
                            tension: 0.4,
                            yAxisID: 'y2'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: false,
                        interaction: {
                            mode: 'index',
                            intersect: false,
                        },
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: { color: '#f1f5f9', font: { size: 9 } }
                            },
                            title: {
                                display: true,
                                text: 'PID Param√©terek Trend',
                                color: '#f1f5f9',
                                font: { size: 12 }
                            }
                        },
                        scales: {
                            x: { display: false },
                            y: {
                                type: 'linear',
                                display: true,
                                position: 'left',
                                grid: { color: '#334155' },
                                ticks: { color: '#94a3b8', font: { size: 8 } },
                                title: {
                                    display: true,
                                    text: 'Kp, Kd',
                                    color: '#94a3b8',
                                    font: { size: 9 }
                                }
                            },
                            y1: {
                                type: 'linear',
                                display: false,
                                position: 'right',
                                grid: { drawOnChartArea: false },
                                ticks: { color: '#94a3b8', font: { size: 8 } }
                            },
                            y2: {
                                type: 'linear',
                                display: true,
                                position: 'right',
                                grid: { drawOnChartArea: false },
                                ticks: { color: '#94a3b8', font: { size: 8 } },
                                title: {
                                    display: true,
                                    text: '%',
                                    color: '#94a3b8',
                                    font: { size: 9 }
                                },
                                min: 90,
                                max: 100
                            }
                        }
                    }
                });
            }
        }

        function updateCharts() {
            const now = new Date();
            const timeLabel = now.toLocaleTimeString('hu-HU', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
            
            if (tempTrendChart) {
                tempTrendChart.data.labels.push(timeLabel);
                tempTrendChart.data.datasets[0].data.push(processData.reactorTemp);
                tempTrendChart.data.datasets[1].data.push(processData.tempSetpoint);
                
                if (tempTrendChart.data.labels.length > 20) {
                    tempTrendChart.data.labels.shift();
                    tempTrendChart.data.datasets[0].data.shift();
                    tempTrendChart.data.datasets[1].data.shift();
                }
                
                tempTrendChart.update('none');
            }
            
            if (pressureTrendChart) {
                pressureTrendChart.data.labels.push(timeLabel);
                pressureTrendChart.data.datasets[0].data.push(processData.reactorPressure);
                pressureTrendChart.data.datasets[1].data.push(processData.pressureSetpoint);
                
                if (pressureTrendChart.data.labels.length > 20) {
                    pressureTrendChart.data.labels.shift();
                    pressureTrendChart.data.datasets[0].data.shift();
                    pressureTrendChart.data.datasets[1].data.shift();
                }
                
                pressureTrendChart.update('none');
            }
            
            if (pidTrendChart) {
                pidTrendChart.data.labels.push(timeLabel);
                pidTrendChart.data.datasets[0].data.push(aiController.kp);
                pidTrendChart.data.datasets[1].data.push(aiController.ki * 10); // Scale Ki for visibility
                pidTrendChart.data.datasets[2].data.push(aiController.kd);
                pidTrendChart.data.datasets[3].data.push(aiController.performance * 100);
                
                if (pidTrendChart.data.labels.length > 20) {
                    pidTrendChart.data.labels.shift();
                    pidTrendChart.data.datasets[0].data.shift();
                    pidTrendChart.data.datasets[1].data.shift();
                    pidTrendChart.data.datasets[2].data.shift();
                    pidTrendChart.data.datasets[3].data.shift();
                }
                
                pidTrendChart.update('none');
            }
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            if (event.ctrlKey) {
                switch(event.key) {
                    case 'a':
                        event.preventDefault();
                        acknowledgeAlarms();
                        break;
                    case 'm':
                        event.preventDefault();
                        toggleMaintenance();
                        break;
                    case 'r':
                        event.preventDefault();
                        exportReport();
                        break;
                    case 'l':
                        event.preventDefault();
                        toggleAILearning();
                        break;
                }
            }
        });

        // Initialize system when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize system components
            updateSystemTime();
            setInterval(updateSystemTime, 1000);
            
            initializeCharts();
            
            // Start data simulation
            setInterval(updateProcessData, 2000);  // Process data: 2 m√°sodpercenk√©nt
            setInterval(updateCharts, 5000);       // Chart update: 5 m√°sodpercenk√©nt
            
            // AI iteration counter with PID parameter evolution
            setInterval(() => {
                if (aiLearningActive) {
                    aiController.iterations++;
                    
                    // Simulate slight PID parameter adjustments during learning
                    if (aiController.iterations % 100 === 0) {
                        aiController.kp += (Math.random() - 0.5) * 0.05;
                        aiController.ki += (Math.random() - 0.5) * 0.01;
                        aiController.kd += (Math.random() - 0.5) * 0.02;
                        
                        // Keep within bounds
                        aiController.kp = Math.max(0.5, Math.min(3.0, aiController.kp));
                        aiController.ki = Math.max(0.05, Math.min(0.5, aiController.ki));
                        aiController.kd = Math.max(0.1, Math.min(1.0, aiController.kd));
                        
                        // Gradually improve performance
                        aiController.performance = Math.min(0.99, aiController.performance + 0.001);
                    }
                    
                    if (aiController.iterations % 50 === 0) {
                        addNeuralLog(`[AI-ITER] Tanul√°si iter√°ci√≥: ${aiController.iterations}`, '#ffff00');
                    }
                }
                
                // Update PID display every second
                updatePIDDisplay();
                
                // Update PID modal if open
                const modal = document.getElementById('pid-modal-overlay');
                if (modal && modal.classList.contains('show')) {
                    updatePIDModal();
                }
            }, 1000);
            
            // Initial setup
            setTimeout(() => {
                updatePIDDisplay();
            }, 100);
            
            // Initial logs
            addNeuralLog('[SYSTEM] SCADA/DCS rendszer inicializ√°lva', '#00ff00');
            addNeuralLog('[AI-PID] Neur√°lis h√°l√≥ akt√≠v', '#ffff00');
            addNeuralLog('[INFO] Billenty≈±kombin√°ci√≥k: Ctrl+A, Ctrl+M, Ctrl+R, Ctrl+L', '#00ffff');
            addNeuralLog('[INFO] Kattints a c√≠msorokra a panelek √∂sszecsuk√°s√°hoz/kibont√°s√°hoz', '#00ffff');
        });
    </script>
</body>
</html>